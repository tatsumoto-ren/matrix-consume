#!/bin/bash

set -euo pipefail

lock=.matrix-consume.lock
units_dir=${XDG_CONFIG_HOME:-$HOME/.config}/systemd/user
temp_webp_path=$(mktemp /tmp/matrix-consume-temp-XXXXXX --suffix=.webp)

readonly lock units_dir temp_webp_path

on_exit() {
	rm -- "$temp_webp_path"
}

program() {
	basename -- "$(readlink -f -- "$0")"
}

help() {
	echo "Usage: $(program) [-c FILE] [-t NUMBER] [-w]"
	echo
	echo "An automatic matrix image uploader."
	echo "The script uploads images from a folder on your computer to a specified Matrix room."
	echo "You can also watch the folder for new images moved into it and upload them automatically."
	echo "The files are deleted locally after uploading."
	echo
	echo "Options:"
	column -N key,description -W description -d -t -s'|' <<-'EOF'
		-h, --help|display this help text and exit.
		--help-config|display config file help text and exit.
		-c, --config|Path to config file.
		-t, --timeout|Timeout between uploads, e.g. 10s, 5m, 1h, etc.
		-w, --watch|Watch for new files in directory.
		-o, --one-shot|Upload one file and exit instead of uploading all files from directory.
		--systemd-init|Create systemd unit and timer files for the current user.
		--systemd-cleanup|Disable systemd unit and timer files for the current user, stop if running, and delete the files.
	EOF
}

help_config() {
	echo "$(program) config:"
	column -N key,description -W description -d -t -s'|' <<-'EOF'
		token|Access token. In Element can be obtained by going to "Settings" > "Help & About".
		server|Address of a Matrix server.
		dir|Local directory to source images from.
		timeout|Sleep time between uploads. The number ends with 's' for seconds (the default), 'm' for minutes, 'h' for hours or 'd' for days.
		watch|If 'true', wait for new files in the directory. Otherwise exit after all files have been uploaded.
		one_shot|Optional, if 'true', upload one image and exit.
		cwebp_convert|If 'true', images will be converted to webp before uploading.
		cwebp_add_args|Additional arguments passed to cwebp, as a bash array.
		curl_add_args|Additional arguments passed to curl, as a bash array.
		move_to|If set, files will be moved to this directory instead of Trash.
	EOF
}

die() {
	echo "$*" >&2
	exit 1
}

read_config() {
	cwebp_add_args=(-quiet -noalpha -qrange 70 95 -mt)
	curl_add_args=(--connect-timeout 30 --max-time 180)

	if [[ -f ${config_filepath:?} ]]; then
		# shellcheck disable=SC1090
		source -- <(grep -xP '^[5a-z_]+=.+$' -- "$config_filepath")
	else
		die "Can't read config file: $config_filepath"
	fi
	readonly room_id \
		token \
		dir=${dir%/} \
		server=${server#https://} \
		timeout=${op_timeout:-${timeout:-3}} \
		watch=${op_watch:-${watch:-false}} \
		one_shot=${op_one_shot:-${one_shot:-false}} \
		cwebp_convert=${cwebp_convert:-false} \
		move_to=${move_to-} \
		cwebp_add_args \
		curl_add_args
	check_config
}

check_config() {
	for var in watch one_shot cwebp_convert; do
		if [[ ${!var} != true ]] && [[ ${!var} != false ]]; then
			die "'${!var}' should be set to 'true' or 'false'."
		fi
	done
	if ! [[ -d $dir ]]; then
		die "Can't locate directory $dir"
	fi
	if ! [[ $server == *.* ]]; then
		die "Invalid server address"
	fi
	if ! [[ $room_id =~ ^![a-zA-Z]+:[^:]+$ ]]; then
		die "Invalid room id, should be like this: '!UoSbpJOhdaqhNldLDv:server.domain'"
	fi
	if ! [[ $token =~ ^[0-9a-zA-Z_]+$ ]]; then
		die "Access token should contain only alphanumeric characters."
	fi
	if ! [[ $timeout =~ [0-9]+[smhd]? ]]; then
		die "Set timeout to a number, in seconds or with a suffix on the end."
	fi
	if [[ -n $move_to ]]; then
		if ! [[ -d $move_to ]]; then
			die "'move_to' should be unset or point to a directory."
		fi
		if [[ $move_to -ef $dir ]]; then
			die "'move_to' and 'dir' can't point to the same directory."
		fi
	fi
}

_curl() {
	curl "${curl_add_args[@]}" "$@"
}

unit_name() {
	tr -cd '[:alnum:]._-' <<<"$(program)-${room_id:?}"
}

check_systemctl() {
	if ! command -v systemctl >/dev/null 2>&1; then
		die "This system doesn't appear to have systemctl."
	fi
}

systemd_init() {
	check_systemctl

	local -r name=$(unit_name)
	local -r unit_filepath=$units_dir/$name.service
	local -r timer_filepath=$units_dir/$name.timer
	local -r executable=$(readlink -f -- "$0")

	mkdir -p -- "$units_dir"

	cat <<-EOF >"$unit_filepath"
		[Unit]
		Description=Matrix Consume for room $room_id
		After=network.target

		[Service]
		Type=simple
		ExecStart="$executable" -c "$config_filepath"

		[Install]
		WantedBy=default.target
	EOF
	echo "Created unit file $unit_filepath."

	cat <<-EOF >"$timer_filepath"
		[Unit]
		Description=Run Matrix Consume periodically for room $room_id

		[Timer]
		OnBootSec=1min
		OnUnitActiveSec=10min

		[Install]
		WantedBy=timers.target
	EOF
	echo "Created timer file $timer_filepath"

	systemctl --user daemon-reload

	echo "Edit the files to adjust run parameters or timeouts."
	echo "Use 'systemctl --user --all [start|enable] NAME.[timer|service]' to start or enable."
}

systemd_cleanup() {
	check_systemctl

	local -r unit_filepath=$units_dir/$(unit_name).service
	local -r timer_filepath=${unit_filepath%.service}.timer

	systemctl --user disable "${timer_filepath##*/}" || true
	systemctl --user stop "${timer_filepath##*/}" || true

	systemctl --user disable "${unit_filepath##*/}" || true
	systemctl --user stop "${unit_filepath##*/}" || true

	rm -v -- "$unit_filepath" "$timer_filepath" || true

	echo "Done."
}

upload_image() {
	_curl --silent \
		--request POST \
		--data-binary "@$image_filepath" \
		--header "Accept: application/json" \
		--header "Content-Type: ${mime_type:?}" \
		--header "Authorization: Bearer $token" \
		"https://$server/_matrix/media/v3/upload"
}

post_image() {
	local content='{
		"body": "<FILENAME>",
		"info": {
			"w": <WIDTH>,
			"h": <HEIGHT>,
			"mimetype": "<MIMETYPE>",
			"size": <SIZE>,
			"thumbnail_url": "<MXC>",
			"thumbnail_info": {
				"w": <WIDTH>,
				"h": <HEIGHT>,
				"mimetype": "<MIMETYPE>",
				"size": <SIZE>
			}
		},
		"msgtype": "m.image",
		"url": "<MXC>"
	}'
	content=${content//<FILENAME>/${RANDOM}.${mime_type##*/}}
	content=${content//<MXC>/$mxc}
	content=${content//<MIMETYPE>/$mime_type}
	content=${content//<SIZE>/$size}
	content=${content//<WIDTH>/${w_h%,*}}
	content=${content//<HEIGHT>/${w_h#*,}}
	_curl --silent \
		--request POST \
		--header "Authorization: Bearer $token" \
		--header "Accept: application/json" \
		--header "Content-Type: application/json" \
		--data "$content" \
		"https://${server}/_matrix/client/v3/rooms/${room_id}/send/m.room.message"
}

delete_image() {
	local -r image_filepath=${1:?Image filepath is not provided.}

	if gio trash -- "$image_filepath" || trash-put -- "$image_filepath"; then
		echo "${image_filepath##*/} moved to trash."
	elif [[ -f $image_filepath ]]; then
		if rm -- "$image_filepath"; then
			echo "${image_filepath##*/} deleted."
		else
			die "Error: ${image_filepath##*/} wasn't deleted."
		fi
	fi
}

move_image() {
	local -r image_filepath=${1:?Image filepath is not provided.}

	if mv -- "$image_filepath" "$move_to"; then
		echo "${image_filepath##*/} moved to ${move_to##*/}."
	else
		die "Error: Couldn't move ${image_filepath##*/}."
	fi
}

get_mime_type() {
	file -b --mime-type -- "$1"
}

handle_file() {
	local -r image_filepath=${1:?} mime_type=${2:?}

	local -r w_h=$(identify -format '%w,%h\n' -- "$image_filepath" | head -1)
	local -r size=$(du -Hb -- "$image_filepath" | cut -f 1)
	local -r mxc=$(upload_image | grep -Po '"content_uri":\s*"\Kmxc://[^"]+(?=")')

	if [[ -n $mxc ]] && [[ $(post_image) == '{"event_id":"$'*'"}' ]]; then
		echo "Uploaded ${image_filepath##*/} to room $room_id"
	else
		die "Couldn't upload ${image_filepath##*/} to room $room_id"
	fi
}

handle_file_webp() {
	local -r image_filepath=${1:?} mime_type=${2:?}

	if [[ $mime_type != */webp ]]; then
		cwebp -o "$temp_webp_path" "${cwebp_add_args[@]}" -- "$image_filepath"
		handle_file "$temp_webp_path" "$(get_mime_type "$temp_webp_path")"
	else
		handle_file "$image_filepath" "$mime_type"
	fi
}

is_dir_occupied() {
	[[ -f "$dir/$lock" ]] && kill -0 "$(cat -- "$dir/$lock")" 2>/dev/null
}

mark_dir_occupied() {
	echo $$ >"$dir/$lock"
}

check_dir_occupied() {
	if is_dir_occupied; then
		die "There's already PID $(cat -- "$dir/$lock") working in $dir"
	else
		mark_dir_occupied
	fi
}

find_files() {
	find "$dir" -maxdepth 1 -type f -print
}

monitor_folder() {
	inotifywait --monitor --quiet --event close_write,moved_to --format '%w%f' -- "$dir"
}

stream_files() {
	find_files | shuf
	if [[ $watch == true ]]; then
		monitor_folder
	fi
}

check_cwebp_installed() {
	if ! cwebp -version >/dev/null 2>&1; then
		die "cwebp is not installed."
	fi
}

get_file_handler() {
	if [[ $cwebp_convert == true ]]; then
		check_cwebp_installed
		echo handle_file_webp
	else
		echo handle_file
	fi
}

get_file_cleaner() {
	if [[ -d $move_to ]]; then
		echo move_image
	else
		echo delete_image
	fi
}

is_image() {
	[[ $file_path =~ \.(jpe?g|png|gif|webp)$ ]] && [[ $mime_type == image/* ]]
}

loop() {
	check_dir_occupied
	local -r file_handler=$(get_file_handler) file_cleaner=$(get_file_cleaner)
	local file_path mime_type
	stream_files | while read -r file_path; do
		if ! [[ -f $file_path ]]; then
			continue
		fi
		mime_type=$(get_mime_type "$file_path")
		if ! is_image; then
			continue
		fi

		if "$file_handler" "$file_path" "$mime_type"; then
			"$file_cleaner" "$file_path"
		fi
		if [[ $one_shot == true ]]; then
			exit
		else
			sleep "${timeout:?}"
		fi
	done
}

main() {
	trap on_exit HUP INT QUIT TERM PWR EXIT
	while :; do
		case ${1-} in
		-h | --help)
			help
			exit
			;;
		--help-config)
			help_config
			exit
			;;
		-c | --config)
			shift
			config_filepath=${1:?Config path is not set.}
			;;
		-t | --timeout)
			shift
			local -r op_timeout=${1:?Timeout is not set.}
			;;
		-w | --watch)
			local -r op_watch=true
			;;
		-o | --one-shot)
			local -r op_one_shot=true
			;;
		--systemd-init)
			local -r main_action=systemd_init
			;;
		--systemd-cleanup)
			local -r main_action=systemd_cleanup
			;;
		"")
			break
			;;
		*)
			die "Unknown command: '$1'."
			;;
		esac
		shift
	done
	readonly config_filepath=${config_filepath:-${XDG_CONFIG_HOME:-$HOME/.config}/matrix-consume/config}
	read_config
	"${main_action:-loop}"
}

main "$@"
