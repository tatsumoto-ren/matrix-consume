#!/bin/bash

set -euo pipefail

readonly \
	lock=.matrix-consume.lock \
	units_dir=${XDG_CONFIG_HOME:-$HOME/.config}/systemd/user

program() {
	basename -- "$(readlink -f -- "$0")"
}

help() {
	echo "Usage: $(program) [-c FILE] [-t SECONDS] [-w]"
	echo
	echo "An automatic matrix image uploader."
	echo "The script uploads images from a folder on your computer to a specified Matrix room."
	echo "You can also watch the folder for new images moved into it and upload them automatically."
	echo "The files are deleted locally after uploading."
	echo
	echo "Options:"
	column -t -s'|' <<-EOF
		-c, --config|Path to config file.
		-t, --timeout|Timeout between uploads in seconds.
		-w, --watch|Watch for new files in directory.
		--enable-autostart|Create a systemd unit file for the current user, enable it and exit.
		--disable-autostart|Disable a systemd unit file for the current user, stop if running, and delete the unit file.
	EOF
}

die() {
	echo "$*" >&2
	exit 1
}

read_config() {
	if [[ -f ${config_filepath:?} ]]; then
		# shellcheck disable=SC1090
		source -- <(grep -xP '^[a-z_]+=.+$' -- "$config_filepath")
	else
		die "Can't read config file: $config_filepath"
	fi
	readonly room_id \
		token \
		dir=${dir%/} \
		server=${server#https://} \
		timeout=${op_timeout:-${timeout:-3}} \
		watch=${op_watch:-${watch:-false}}
	check_config
}

check_config() {
	if [[ $watch != true ]] && [[ $watch != false ]]; then
		die "'watch' should be set to 'true' or 'false'."
	fi
	if ! [[ -d $dir ]]; then
		die "Can't locate directory $dir"
	fi
	if ! [[ $server == *.* ]]; then
		die "Invalid server address"
	fi
	if ! [[ $room_id =~ ^![a-zA-Z]+:[^:]+$ ]]; then
		die "Invalid room id, should be like this: '!UoSbpJOhdaqhNldLDv:server.domain'"
	fi
	if ! [[ $token =~ ^[0-9a-zA-Z_]+$ ]]; then
		die "Access token should contain only alphanumeric characters."
	fi
	if ! [[ $timeout =~ [0-9]+ ]]; then
		die "Set timeout to a number, in seconds."
	fi
}

upload_image() {
	curl --silent \
		--data-binary "@$image_filepath" \
		--data-urlencode "filename=$image_filepath" \
		--header "Accept: application/json" \
		--header "Content-Type: ${mime_type:?}" \
		--header "Authorization: Bearer $token" \
		--request POST \
		"https://$server/_matrix/media/v3/upload"
}

delete_image() {
	if gio trash -- "${image_filepath:?}" || trash-put -- "${image_filepath:?}"; then
		echo "$image_filepath moved to trash."
	elif [[ -f "${image_filepath:?}" ]]; then
		if rm -- "${image_filepath:?}"; then
			echo "'$image_filepath' deleted."
		else
			die "Error: $image_filepath wasn't deleted."
		fi
	fi

}

post_image() {
	local content='{
		"body": "<FILENAME>",
		"info": {
			"w": <WIDTH>,
			"h": <HEIGHT>,
			"mimetype": "<MIMETYPE>",
			"size": <SIZE>,
			"thumbnail_url": "<MXC>",
			"thumbnail_info": {
				"w": <WIDTH>,
				"h": <HEIGHT>,
				"mimetype": "<MIMETYPE>",
				"size": <SIZE>
			}
		},
		"msgtype": "m.image",
		"url": "<MXC>"
	}'
	content=${content//<FILENAME>/${RANDOM}.${mime_type##*/}}
	content=${content//<MXC>/$mxc}
	content=${content//<MIMETYPE>/$mime_type}
	content=${content//<SIZE>/$size}
	content=${content//<WIDTH>/${w_h%,*}}
	content=${content//<HEIGHT>/${w_h#*,}}
	curl -s -X POST "https://${server}/_matrix/client/v3/rooms/${room_id}/send/m.room.message" \
		--header "Authorization: Bearer $token" \
		--header "Accept: application/json" \
		--header "Content-Type: application/json" \
		-d "$content"
}

unit_filename() {
	tr -cd '[:alnum:]._-' <<<"$(program)-${room_id:?}.service"
}

check_systemctl() {
	if ! command -v systemctl >/dev/null 2>&1; then
		die "This system doesn't appear to have systemctl."
	fi
}

enable_autostart() {
	check_systemctl

	local -r unit_filepath="$units_dir/$(unit_filename)"
	local -r executable=$(readlink -f -- "$0")

	mkdir -p -- "$units_dir"
	cat <<-EOF >"$unit_filepath"
		[Unit]
		Description=Matrix Consume for room $room_id
		After=network.target

		[Service]
		ExecStart="$executable" -c "$config_filepath" -w

		[Install]
		WantedBy=default.target
	EOF
	echo "Created unit file $unit_filepath"
	systemctl --user daemon-reload
	systemctl --user enable "${unit_filepath##*/}"
	echo "Run 'systemctl --user --all start ${unit_filepath##*/}' to start it now."
}

disable_autostart() {
	check_systemctl

	local -r unit_filepath="$units_dir/$(unit_filename)"
	systemctl --user disable "${unit_filepath##*/}"
	systemctl --user stop "${unit_filepath##*/}"
	rm -- "$unit_filepath"
	echo "Disabled autostart, stopped service, removed service file."
}

handle_file() {
	local -r image_filepath=${1:?}

	if ! [[ -f $image_filepath ]]; then
		die "$image_filepath is not a file."
	fi

	local -r mime_type=$(file -b --mime-type -- "$image_filepath")

	if [[ $image_filepath =~ \.(jpe?g|png|gif|webp)$ ]] && [[ $mime_type == image/* ]]; then
		local -r w_h=$(identify -format '%w,%h\n' -- "$image_filepath" | head -1)
		local -r size=$(du -Hb -- "$image_filepath" | cut -f 1)
		local -r mxc=$(upload_image | grep -Po '"content_uri":\s*"\Kmxc://[^"]+(?=")')

		if [[ -n $mxc ]] && [[ $(post_image) == '{"event_id":"$'*'"}' ]]; then
			echo "Uploaded $image_filepath"
			delete_image
		else
			die "Couldn't upload $image_filepath"
		fi
	fi
}

is_dir_occupied() {
	[[ -f "$dir/$lock" ]] && kill -0 "$(cat -- "$dir/$lock")" 2>/dev/null
}

mark_dir_occupied() {
	echo $$ >"$dir/$lock"
}

check_dir_occupied() {
	if is_dir_occupied; then
		die "There's already PID $(cat -- "$dir/$lock") working in $dir"
	else
		mark_dir_occupied
	fi
}

find_files(){
	find "$dir" -maxdepth 1 -type f -printf '%f\n'
}

monitor_folder() {
	inotifywait --monitor --quiet --event close_write,moved_to --format '%f' -- "$dir"
}

stream_files() {
	find_files | shuf
	if [[ $watch == true ]]; then
		monitor_folder
	fi
}

loop() {
	check_dir_occupied
	stream_files | while read -r filename; do
		handle_file "$dir/$filename"
		sleep "${timeout:?}s"
	done
}

main() {
	while :; do
		case ${1-} in
		-h | --help)
			help
			exit
			;;
		-c | --config)
			shift
			config_filepath=${1:?Config path is not set.}
			;;
		-t | --timeout)
			shift
			local -r op_timeout=${1:?Timeout is not set.}
			;;
		-w | --watch)
			local -r op_watch=true
			;;
		--enable-autostart)
			local -r main_action=enable_autostart
			;;
		--disable-autostart)
			local -r main_action=disable_autostart
			;;
		"")
			break
			;;
		*)
			die "Unknown command: '$1'."
			;;
		esac
		shift
	done
	readonly config_filepath=${config_filepath:-${XDG_CONFIG_HOME:-$HOME/.config}/matrix-consume/config}
	read_config
	"${main_action:-loop}"
}

main "$@"
